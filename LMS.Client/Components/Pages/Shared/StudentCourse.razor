@using System.Security.Claims
@inject HttpClient ApiClient
@inject UserManager<User> UserManager

<div>
    @if (!_apiAvailable)
    {
        <div class="alert alert-danger" role="alert">API not available</div>
    }
    else
    {
        @if (_dataLoaded)
        {
            @if (_studentCourse is not null)
            {
                <h2>Current Course</h2>

                <div class="d-block p-2 bg-secondary text-white">
                    <p><strong>@_studentCourse.Name</strong></p>
                    <strong>Duration:</strong> @_studentCourse.StartDate - @_studentCourse.EndDate
                </div>
            }
            else
            {
                <div class="alert alert-primary" role="alert">No course available</div>
            }
        }
        else
        {
            <div class="alert alert-primary" role="alert">Loading...</div>
        }
    }
</div>

@code {
    
    private StudentCourseBaseModel _studentCourse = new StudentCourseBaseModel();
    private bool _apiAvailable = true;
    private bool _dataLoaded = false;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState.User;
            var targetUser = await UserManager.GetUserAsync(user);

            if (targetUser is not null)
            {
                try
                {
                    var response = await ApiClient.GetFromJsonAsync<Response>($"users/students/{targetUser.Id}/course");
                    if (response != null && response.StudentCourse != null)
                    {
                        _studentCourse = response.StudentCourse;
                    }

                    _dataLoaded = true;
                }
                catch
                {
                    _apiAvailable = false;
                }
            }
        }
    }

    private class Response
    {
        public StudentCourseBaseModel? StudentCourse { get; set; }
    }
}
