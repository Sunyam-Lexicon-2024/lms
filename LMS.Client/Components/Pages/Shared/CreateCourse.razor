@inject HttpClient ApiClient
@inject ToastService ToastService

<div class="row">
    <div class="col-12">
        <p class="d-inline-flex gap-1">
            <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAddCourse" aria-expanded="false" aria-controls="collapseAddCourse">
                Add a new Course
            </button>
        </p>
        <div class="collapse" id="collapseAddCourse">
            <h3>Add a new Course</h3>
            <EditForm method="post" Model="CourseCreate" OnValidSubmit="AddCourse" FormName="CreateCourse" Enhance>
                <DataAnnotationsValidator />
                <div class="row pb-3">
                    <div class="col-12">
                        <label for="name" class="form-label">Course name</label>
                        <InputText id="name" @bind-Value="CourseCreate.Name" class="form-control" placeholder="Enter course name" />
                    </div>
                </div>
                <div class="row pb-3">
                    <div class="col-12">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" @bind-Value="CourseCreate.Description" class="form-control" maxlength="1024" placeholder="Add a course description." />
                    </div>
                </div>
                <div class="row pb-3">
                    <div class="col-6">
                        <label for="startdate" class="form-label">Start date</label>
                        <DateInput TValue="DateOnly" @bind-Value="CourseCreate.StartDate" EnableMinMax="true"
                                   Min="@CourseCreate.StartDate" Max="@CourseCreate.StartDate.AddYears(10)" />
                    </div>
                    <div class="col-6">
                        <label for="enddate" class="form-label">End date</label>
                        <DateInput TValue="DateOnly" @bind-Value="CourseCreate.EndDate" EnableMinMax="true"
                                   Min="@CourseCreate.EndDate" Max="@CourseCreate.StartDate.AddYears(10)" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </div>
            </EditForm>
            @if (_errorResponse is not null && _errorResponse.Errors!.Count > 0)
            {
                <Alert class="d-flex flex-column mt-2" Color="AlertColor.Danger">
                    <Icon Name="IconName.ExclamationTriangleFill" />
                    <p><strong>Validation failed</strong></p>
                    <hr>
                    @foreach (var (property, errors) in _errorResponse.Errors)
                    {
                        <p><strong>@property</strong></p>
                        foreach (var e in errors)
                        {
                            <p>@e</p>
                        }
                    }
                </Alert>
            }
        </div>

    </div>
</div>

@code {

    [SupplyParameterFromForm]
    public CourseCreateModel CourseCreate { get; set; } = new();

    private ApiErrorResponseModel? _errorResponse;



    protected async Task AddCourse()
    {
        var response = await ApiClient.PostAsJsonAsync<CourseCreateModel>("courses/create-course", CourseCreate);

        if (!response.IsSuccessStatusCode)
        {
            try
            {
                _errorResponse = await response.Content.ReadFromJsonAsync<ApiErrorResponseModel>()!;
                ToastService.Notify(new(ToastType.Danger, $"Could not create Course '{CourseCreate.Name}'."));
            }
            catch
            {
                _errorResponse = new()
                    {
                        Errors = new Dictionary<string, List<string>>() { { "Unexpected error", [await response.Content.ReadAsStringAsync()] } }
                    };
                ToastService.Notify(new(ToastType.Danger, $"Unexpected error: '{CourseCreate.Name}'."));
            }
        }
        else
        {
            ToastService.Notify(new(ToastType.Success, $"Course '{CourseCreate.Name}' successfully."));
            CourseCreate = new();
            _errorResponse = null;
        }
    }
}
