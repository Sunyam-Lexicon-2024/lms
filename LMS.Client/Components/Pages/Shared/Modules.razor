@inject HttpClient ApiClient
@inject UserManager<User> UserManager

<div class="accordion" id="accordionExample">
    @if (!_apiAvailable)
    {
        <div class="alert alert-danger" role="alert">API not available</div>
    }
    else
    {
        if (_dataLoaded)
        {
            if (_modules.Any())
            {
                @foreach (var m in _modules)
                {
                    <div class="accordion-item">
                        <h2>
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@m.Name"
                                aria-expanded="true" aria-controls="collapseOne">
                                <span><strong>Module</strong> @m.Name</span>
                            </button>
                        </h2>
                        <div id="@m.Name" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                            <div class="accordion-body d-flex flex-column">
                                <div>
                                    <strong>Start:</strong> @m.StartDate
                                </div>
                                <div>
                                    <strong>End:</strong> @m.EndDate
                                </div>
                                <div>
                                    <a href="#">Module details</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-primary" role="alert">No courses available</div>
            }
        }
        else
        {
            <div class="alert alert-primary" role="alert">Loading...</div>
        }
    }
</div>


@code {

    private IEnumerable<ModuleBaseModel> _modules = [];

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private bool _apiAvailable = true;
    private bool _dataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState.User;
            var targetUser = await UserManager.GetUserAsync(user);

            if (targetUser is not null)
            {
                try
                {
                    var response = await ApiClient.GetFromJsonAsync<ModuleData>($"users/students/{targetUser.Id}/modules")!;
                    _modules = response!.Modules!;
                    _dataLoaded = true;
                }
                catch
                {
                    _apiAvailable = false;
                }
            }
        }
    }

    private class ModuleData
    {
        public IEnumerable<ModuleBaseModel>? Modules { get; set; }
    }
}