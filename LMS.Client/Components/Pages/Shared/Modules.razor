@inject HttpClient ApiClient
@inject ModalService ModalService

<div class="accordion" id="accordionExample">
    @if (!_apiAvailable)
    {
        <div class="alert alert-danger" role="alert">API not available</div>
    }
    else
    {
        if (_dataLoaded)
        {
            if (_modules.Any())
            {
                @foreach (var m in _modules)
                {
                    <div class="accordion-item">
                        <h2>
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@m.Name"
                                aria-expanded="true" aria-controls="collapseOne">
                                <span><strong>Module</strong> @m.Name</span>
                            </button>
                        </h2>
                        <div id="@m.Name" class="accordion-collapse collapse">
                            <div class="accordion-body d-flex flex-column">
                                <div>
                                    <strong>Start:</strong> @m.StartDate
                                </div>
                                <div>
                                    <strong>End:</strong> @m.EndDate
                                </div>
                                <div>
                                    <button @onclick=@((m) => ShowModal(m))>Module Activities</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-primary" role="alert">No courses available</div>
            }
        }
        else
        {
            <div class="alert alert-primary" role="alert">Loading...</div>
        }
    }
</div>

<Modal @ref="_moduleModal">
    <ModuleActivities Activites=_moduleActivities />
</Modal>

@code {

    private IEnumerable<ModuleBaseModel> _modules = [];

    [Parameter]
    public int? CourseId { get; set; }

    private bool _apiAvailable = true;
    private bool _dataLoaded = false;

    private Modal? _moduleModal = default!;

    private IEnumerable<ModuleActivityBaseModel>? _moduleActivities = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await ApiClient.GetFromJsonAsync<ModuleData>($"courses/{CourseId}/modules")!;
            _modules = response!.Modules!;
            _dataLoaded = true;
        }
        catch
        {
            _apiAvailable = false;
        }
    }

    private async Task ShowModal(ModuleBaseModel module)
    {

        IEnumerable<ModuleActivityBaseModel>? activities = [];

        try
        {
            _moduleActivities = await ApiClient
            .GetFromJsonAsync<IEnumerable<ModuleActivityBaseModel>>($"courses/modules/{module.ModuleId}/get-all-activities");
        }
        catch
        {
            _moduleActivities = [];
        }
        finally
        {
            await _moduleModal!.ShowAsync();
        }

    }

    private class ModuleData
    {
        public IEnumerable<ModuleBaseModel>? Modules { get; set; }
    }
}