@inject HttpClient ApiClient
@inject ModalService ModalService
@inject ILogger<Modules> Logger

<div class="accordion" id="accordionExample">
    @if (!_apiAvailable)
    {
        <div class="alert alert-danger" role="alert">API not available</div>
    }
    else
    {
        if (_dataLoaded)
        {
            if (_modules.Any())
            {
                @foreach (var m in _modules)
                {
                    <div class="accordion-item">
                        <h2>
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@m.Name"
                                aria-expanded="true" aria-controls="collapseOne">
                                <span><strong>Module</strong> @m.Name</span>
                            </button>
                        </h2>
                        <div id="@m.Name" class="accordion-collapse collapse">
                            <div class="accordion-body d-flex flex-column">
                                <div class="accordion-item d-flex flex-column p-2">
                                    <div>
                                        <strong>Start:</strong> @m.StartDate
                                    </div>
                                    <div>
                                        <strong>End:</strong> @m.EndDate
                                    </div>
                                </div>
                                <div class="accordion-item d-flex flex-column p-2">
                                    @(m.Description?.Length > 100 ? m.Description.Substring(0, 100) : m.Description ?? "No description available")
                                </div>
                                <div>
                                    <button class="btn btn-primary my-2" @onclick="@((_) => ShowModal(m))">Module
                                        Activities</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-primary" role="alert">No courses available</div>
            }
        }
        else
        {
            <div class="alert alert-primary" role="alert">Loading...</div>
        }
    }
</div>

<Modal @ref="_moduleModal" Title="@_moduleModalTitle" HeaderCssClass="d-flex flex-row justify-content-between">
    <BodyTemplate>
        <ModuleActivities Activities=_moduleActivities />
    </BodyTemplate>
</Modal>

@code {

    private IEnumerable<ModuleBaseModel> _modules = [];

    [Parameter]
    public int? CourseId { get; set; }

    private bool _apiAvailable = true;
    private bool _dataLoaded = false;

    private Modal? _moduleModal = default!;
    private string? _moduleModalTitle;

    private IEnumerable<ModuleActivityBaseModel>? _moduleActivities = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await ApiClient.GetFromJsonAsync<ModuleData>($"courses/{CourseId}/modules")!;
            _modules = response!.Modules!;
            _dataLoaded = true;
        }
        catch
        {
            _apiAvailable = false;
        }
    }

    private async Task ShowModal(ModuleBaseModel module)
    {
        try
        {
            _moduleActivities = await ApiClient
            .GetFromJsonAsync<IEnumerable<ModuleActivityBaseModel>>($"courses/modules/{module.ModuleId}/get-all-activities");
        }
        catch (Exception ex)
        {
            _apiAvailable = false;
            Logger.LogError("{exception}", ex);
        }
        finally
        {
            try
            {
                _moduleModalTitle = $"{module.Name} activities";
                await _moduleModal!.ShowAsync();
            }
            catch
            { } // needed to silence JSInterop not recognizing exited circuit
        }
    }

    private class ModuleData
    {
        public IEnumerable<ModuleBaseModel>? Modules { get; set; }
    }
}