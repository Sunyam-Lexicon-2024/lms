@page "/module-details"
@inject HttpClient ApiClient
@using LMS.Core.Models
﻿@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject UserManager<User> UserManager

<h3>Module Details</h3>


@if (!_apiAvailable)
{
    <div class="alert alert-danger" role="alert">API not available</div>
}
else if (!_dataLoaded)
{
    <div class="alert alert-primary" role="alert">Loading...</div>
}
else if (moduleDetails != null)
{
    <div class="card mb-4">
        <div class="card-header bg-secondary text-white">
            <h5>@moduleDetails.Module.Name</h5>
        </div>
        <div class="card-body">
            <p><strong>Module ID:</strong> @moduleDetails.Module.Id</p>
            <p><strong>Name :</strong> @moduleDetails.Module.Name</p>
            <p><strong>Description:</strong> @moduleDetails.Module.Description</p>
            <p><strong>Start Date:</strong> @moduleDetails.Module.StartDate.ToString("yyyy-MM-dd")</p>
            <p><strong>End Date:</strong> @moduleDetails.Module.EndDate?.ToString("yyyy-MM-dd")</p>
            <p><strong>Parent Module ID:</strong> @moduleDetails.Module.ParentId</p>
        </div>
    </div>
}
else
{
    <div class="alert alert-primary" role="alert">No module details available</div>
}

@code {
    private ModuleResponse? moduleDetails;
    private bool _apiAvailable = true;
    private bool _dataLoaded = false;

    [CascadingParameter]
    Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = 2;
         
            var apiUrl = $"student/course/modules/{userId}";

            try
            {
                moduleDetails = await ApiClient.GetFromJsonAsync<ModuleResponse>(apiUrl);
                if (moduleDetails != null && moduleDetails.Module != null)
                {
                    _dataLoaded = true;
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"API call failed: {ex.Message}");
                _apiAvailable = false;
            }
        }
        else
        {
            _apiAvailable = false;
        }
    }

    public class ModuleResponse
    {
        public ModuleDetailsModel Module { get; set; }
    }

   
}